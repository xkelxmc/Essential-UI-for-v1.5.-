state_available_jobs = {
	add = available_jobs
	if = {
		limit = {
			has_building = building_conscription_center 
			NOT = { has_active_building = building_conscription_center }
		}
		b:building_conscription_center  = {
			subtract = modifier:building_employment_soldiers_add
			subtract = modifier:building_employment_officers_add
		}
	}
}

state_unemployed = {
	add = state_population
	multiply = state_unemployment_rate
}

state_subsistence_jobs = {
	every_scope_building = {
		limit = {
			is_subsistence_building = yes
		}
		add = {
			add = {
				add = modifier:building_employment_peasants_add
				add = modifier:building_employment_clergymen_add
				add = modifier:building_employment_aristocrats_add
				add = modifier:building_employment_farmers_add
				add = modifier:building_employment_bureaucrats_add
			}
			multiply = { value = 1 subtract = occupancy }
		}
	}
}

state_subsistence_workers = {
	every_scope_building = {
		limit = {
			is_subsistence_building = yes
		}
		add = {
			add = {
				add = modifier:building_employment_peasants_add
				add = modifier:building_employment_clergymen_add
				add = modifier:building_employment_aristocrats_add
				add = modifier:building_employment_farmers_add
				add = modifier:building_employment_bureaucrats_add
			}
			multiply = occupancy
		}
	}
}

state_available_workers = {
	value = state_subsistence_workers
	add = state_unemployed
}

building_total_jobs = {
	add = modifier:building_employment_aristocrats_add
	add = modifier:building_employment_capitalists_add
	add = modifier:building_employment_officers_add
	add = modifier:building_employment_academics_add
	add = modifier:building_employment_bureaucrats_add
	add = modifier:building_employment_clergymen_add
	add = modifier:building_employment_engineers_add
	add = modifier:building_employment_shopkeepers_add
	add = modifier:building_employment_clerks_add
	add = modifier:building_employment_farmers_add
	add = modifier:building_employment_machinists_add
	add = modifier:building_employment_laborers_add
	add = modifier:building_employment_soldiers_add
}

building_total_jobs_weighted = {
	add = { value = modifier:building_employment_aristocrats_add multiply = 6 }
	add = { value = modifier:building_employment_capitalists_add multiply = 6 }
	add = { value = modifier:building_employment_officers_add multiply = 5 }
	add = { value = modifier:building_employment_academics_add multiply = 4 }
	add = { value = modifier:building_employment_bureaucrats_add multiply = 4 }
	add = { value = modifier:building_employment_clergymen_add multiply = 3 }
	add = { value = modifier:building_employment_engineers_add multiply = 3 }
	add = { value = modifier:building_employment_shopkeepers_add multiply = 2 }
	add = { value = modifier:building_employment_clerks_add multiply = 1.5 }
	add = { value = modifier:building_employment_farmers_add multiply = 1.5 }
	add = { value = modifier:building_employment_machinists_add multiply = 1.5 }
	add = { value = modifier:building_employment_laborers_add multiply = 1 }
	add = { value = modifier:building_employment_soldiers_add multiply = 1.5 }
}

building_total_jobs_weighted_from_pms = {
	add = { value = local_var:curr_building_employment_aristocrats_add multiply = 6 }
	add = { value = local_var:curr_building_employment_capitalists_add multiply = 6 }
	add = { value = local_var:curr_building_employment_officers_add multiply = 5 }
	add = { value = local_var:curr_building_employment_academics_add multiply = 4 }
	add = { value = local_var:curr_building_employment_bureaucrats_add multiply = 4 }
	add = { value = local_var:curr_building_employment_clergymen_add multiply = 3 }
	add = { value = local_var:curr_building_employment_engineers_add multiply = 3 }
	add = { value = local_var:curr_building_employment_shopkeepers_add multiply = 2 }
	add = { value = local_var:curr_building_employment_clerks_add multiply = 1.5 }
	add = { value = local_var:curr_building_employment_farmers_add multiply = 1.5 }
	add = { value = local_var:curr_building_employment_machinists_add multiply = 1.5 }
	add = { value = local_var:curr_building_employment_laborers_add multiply = 1 }
	add = { value = local_var:curr_building_employment_soldiers_add multiply = 1.5 }
}

state_available_jobs_autopms = {
	every_scope_building = {
		add = {
			value = 0
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_assembly_lines_building_furniture_manufacturies
						has_active_production_method = pm_assembly_lines_building_tooling_workshops
						has_active_production_method = pm_assembly_lines_building_arms_industry
						has_active_production_method = pm_assembly_lines_building_munition_plants
						has_active_production_method = pm_compression_ignition_tractors
						has_active_production_method = pm_flash_freezing_building_fishing_wharf
						has_active_production_method = pm_flash_freezing_building_whaling_station
					}
				}
				add = 3000
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_automated_bakery 
						has_active_production_method = pm_automatic_power_looms
						has_active_production_method = pm_automatic_bottle_blowers
						has_active_production_method = pm_tractors
					}
				}
				add = 2500
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_rotary_valve_engine_building_furniture_manufacturies
						has_active_production_method = pm_rotary_valve_engine_building_tooling_workshops
						has_active_production_method = pm_rotary_valve_engine_building_paper_mills
						has_active_production_method = pm_rotary_valve_engine_building_steel_mills
						has_active_production_method = pm_assembly_lines_building_motor_industry
						has_active_production_method = pm_rotary_valve_engine_building_arms_industry
						has_active_production_method = pm_rotary_valve_engine_building_munition_plants
						has_active_production_method = pm_refrigerated_rail_cars_building_fishing_wharf
						has_active_production_method = pm_refrigerated_rail_cars_building_whaling_station
						has_active_production_method = pm_tanker_cars
					}
				}
				add = 2000
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_electric_fencing
						has_active_production_method = pm_refrigerated_rail_cars_building_livestock_ranch
					}
				}
				add = 1800
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_mechanized_looms
						has_active_production_method = pm_watertube_boiler_building_furniture_manufacturies
						has_active_production_method = pm_watertube_boiler_building_tooling_workshops
						has_active_production_method = pm_watertube_boiler_building_paper_mills
						has_active_production_method = pm_watertube_boiler_building_steel_mills
						has_active_production_method = pm_rotary_valve_engine_building_motor_industry
						has_active_production_method = pm_steam_threshers
						has_active_production_method = pm_log_carts
					}
				}
				add = 1500
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_chainsaws
					}
				}
				add = 1100
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_watertube_boiler_building_motor_industry
						has_active_production_method = pm_barbed_wire_fences
						has_active_production_method = pm_steam_donkey_building_coal_mine
						has_active_production_method = pm_steam_donkey_mine
						has_active_production_method = pm_public_motor_carriages
						has_active_production_method = pm_steam_donkey_building_logging_camp
						has_active_production_method = pm_refrigerated_storage_building_fishing_wharf
						has_active_production_method = pm_refrigerated_storage_building_whaling_station
						has_active_production_method = pm_rail_transport_building_oil_rig
						has_active_production_method = pm_steel_passenger_carriages
					}
				}
				add = 1000
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_refrigerated_storage_building_livestock_ranch
						has_active_production_method = pm_steam_rail_transport
						has_active_production_method = pm_rail_transport_mine
						has_active_production_method = pm_rail_transport_building_logging_camp
					}
				}
				add = 1000
			}
			if = {
				limit = {
					OR = {
						has_active_production_method = pm_tools
						has_active_production_method = pm_public_trams
						has_active_production_method = pm_wooden_passenger_carriages
					}
				}
				add = 500
			}
			multiply = level
		}
	}
}

state_available_jobs_with_autopms = {
	value = state_available_jobs
	add = state_available_jobs_autopms
}

state_available_workers_autopms = {
	if = { limit = { has_building = building_food_industry } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_food_industry PM = pm_automated_bakery } }
			add = 3000
		}
		multiply = b:building_food_industry.level
	} }
	if = { limit = { has_building = building_textile_mills } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_textile_mills PM = pm_automatic_power_looms } }
			add = 2500
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_textile_mills PM = pm_mechanized_looms } }
			add = 1500
		}
		multiply = b:building_textile_mills.level
	} }
	if = { limit = { has_building = building_furniture_manufacturies } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_furniture_manufacturies PM = pm_assembly_lines_building_furniture_manufacturies } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_furniture_manufacturies PM = pm_rotary_valve_engine_building_furniture_manufacturies } }
			add = 2000
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_furniture_manufacturies PM = pm_watertube_boiler_building_furniture_manufacturies } }
			add = 1500
		}
		multiply = b:building_furniture_manufacturies.level
	} }
	if = { limit = { has_building = building_tooling_workshops } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_tooling_workshops PM = pm_assembly_lines_building_tooling_workshops } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_tooling_workshops PM = pm_rotary_valve_engine_building_tooling_workshops } }
			add = 2000
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_tooling_workshops PM = pm_watertube_boiler_building_tooling_workshops } }
			add = 1500
		}
		multiply = b:building_tooling_workshops.level
	} }
	if = { limit = { has_building = building_glassworks } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_glassworks PM = pm_automatic_bottle_blowers } }
			add = 2500
		}
		multiply = b:building_glassworks.level
	} }
	if = { limit = { has_building = building_paper_mills } add = {
		if = { limit = { has_or_can_pm = { BTYPE = building_paper_mills PM = pm_rotary_valve_engine_building_paper_mills } }
			add = 2000
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_paper_mills PM = pm_watertube_boiler_building_paper_mills } }
			add = 1500
		}
		multiply = b:building_paper_mills.level
	} }
	if = { limit = { has_building = building_steel_mills } add = {
		if = { limit = { has_or_can_pm = { BTYPE = building_steel_mills PM = pm_rotary_valve_engine_building_steel_mills } }
			add = 2000
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_steel_mills PM = pm_watertube_boiler_building_steel_mills } }
			add = 1500
		}
		multiply = b:building_steel_mills.level
	} }
	if = { limit = { has_building = building_motor_industry } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_motor_industry PM = pm_assembly_lines_building_motor_industry } }
			add = 2000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_motor_industry PM = pm_rotary_valve_engine_building_motor_industry } }
			add = 1500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_motor_industry PM = pm_watertube_boiler_building_motor_industry } }
			add = 1000
		}
		multiply = b:building_motor_industry.level
	} }
	if = { limit = { has_building = building_arms_industry } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_arms_industry PM = pm_assembly_lines_building_arms_industry } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_arms_industry PM = pm_rotary_valve_engine_building_arms_industry } }
			add = 2000
		}
		multiply = b:building_arms_industry.level
	} }
	if = { limit = { has_building = building_munition_plants } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_munition_plants PM = pm_assembly_lines_building_munition_plants } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_munition_plants PM = pm_rotary_valve_engine_building_munition_plants } }
			add = 2000
		}
		multiply = b:building_munition_plants.level
	} }
	if = { limit = { has_building = building_rye_farm } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_rye_farm PM = pm_compression_ignition_tractors } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_rye_farm PM = pm_tractors } }
			add = 2500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_rye_farm PM = pm_steam_threshers } }
			add = 1500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_rye_farm PM = pm_tools } }
			add = 500
		}
		multiply = b:building_rye_farm.level
	} }
	if = { limit = { has_building = building_wheat_farm } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_wheat_farm PM = pm_compression_ignition_tractors } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_wheat_farm PM = pm_tractors } }
			add = 2500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_wheat_farm PM = pm_steam_threshers } }
			add = 1500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_wheat_farm PM = pm_tools } }
			add = 500
		}
		multiply = b:building_wheat_farm.level
	} }
	if = { limit = { has_building = building_rice_farm } add = {
		if = { limit = { has_or_can_pm = { BTYPE = building_rice_farm PM = pm_steam_threshers } }
			add = 1500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_rice_farm PM = pm_tools } }
			add = 500
		}
		multiply = b:building_rice_farm.level
	} }
	if = { limit = { has_building = building_maize_farm } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_maize_farm PM = pm_compression_ignition_tractors } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_maize_farm PM = pm_tractors } }
			add = 2500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_maize_farm PM = pm_steam_threshers } }
			add = 1500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_maize_farm PM = pm_tools } }
			add = 500
		}
		multiply = b:building_maize_farm.level
	} }
	if = { limit = { has_building = building_millet_farm } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_millet_farm PM = pm_compression_ignition_tractors } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_millet_farm PM = pm_tractors } }
			add = 2500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_millet_farm PM = pm_steam_threshers } }
			add = 1500
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_millet_farm PM = pm_tools } }
			add = 500
		}
		multiply = b:building_millet_farm.level
	} }
	if = { limit = { has_building = building_livestock_ranch } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_livestock_ranch PM = pm_electric_fencing } }
			add = 1800
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_livestock_ranch PM = pm_barbed_wire_fences } }
			add = 1000
		}
		if = {
			limit = { has_or_can_pm = { BTYPE = building_livestock_ranch PM = pm_refrigerated_rail_cars_building_livestock_ranch } }
			add = 1800
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_livestock_ranch PM = pm_refrigerated_storage_building_livestock_ranch } }
			add = 1000
		}
		multiply = b:building_livestock_ranch.level
	} }
	if = { limit = { has_building = building_coal_mine } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_coal_mine PM = pm_steam_donkey_building_coal_mine } }
			add = 1000
		}
		if = {
			limit = { has_or_can_pm = { BTYPE = building_coal_mine PM = pm_rail_transport_mine } }
			add = 1000
		}
		multiply = b:building_coal_mine.level
	} }
	if = { limit = { has_building = building_iron_mine } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_iron_mine PM = pm_steam_donkey_mine } }
			add = 1000
		}
		if = {
			limit = { has_or_can_pm = { BTYPE = building_iron_mine PM = pm_rail_transport_mine } }
			add = 1000
		}
		multiply = b:building_iron_mine.level
	} }
	if = { limit = { has_building = building_lead_mine } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_lead_mine PM = pm_steam_donkey_mine } }
			add = 1000
		}
		if = {
			limit = { has_or_can_pm = { BTYPE = building_lead_mine PM = pm_rail_transport_mine } }
			add = 1000
		}
		multiply = b:building_lead_mine.level
	} }
	if = { limit = { has_building = building_sulfur_mine } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_sulfur_mine PM = pm_steam_donkey_mine } }
			add = 1000
		}
		if = {
			limit = { has_or_can_pm = { BTYPE = building_sulfur_mine PM = pm_rail_transport_mine } }
			add = 1000
		}
		multiply = b:building_sulfur_mine.level
	} }
	if = { limit = { has_building = building_gold_mine } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_gold_mine PM = pm_steam_donkey_mine } }
			add = 1000
		}
		if = {
			limit = { has_or_can_pm = { BTYPE = building_gold_mine PM = pm_rail_transport_mine } }
			add = 1000
		}
		multiply = b:building_gold_mine.level
	} }
	if = { limit = { has_building = building_coffee_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_coffee_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_coffee_plantation.level
	} }
	if = { limit = { has_building = building_cotton_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_cotton_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_cotton_plantation.level
	} }
	if = { limit = { has_building = building_dye_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_dye_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_dye_plantation.level
	} }
	if = { limit = { has_building = building_opium_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_opium_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_opium_plantation.level
	} }
	if = { limit = { has_building = building_tea_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_tea_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_tea_plantation.level
	} }
	if = { limit = { has_building = building_tobacco_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_tobacco_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_tobacco_plantation.level
	} }
	if = { limit = { has_building = building_sugar_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_sugar_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_sugar_plantation.level
	} }
	if = { limit = { has_building = building_banana_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_banana_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_banana_plantation.level
	} }
	if = { limit = { has_building = building_silk_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_silk_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_silk_plantation.level
	} }
	if = { limit = { has_building = building_urban_center } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_urban_center PM = pm_public_motor_carriages } }
			add = 1000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_urban_center PM = pm_public_trams } }
			add = 500
		}
		multiply = b:building_urban_center.level
	} }
	if = { limit = { has_building = building_logging_camp } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_logging_camp PM = pm_chainsaws } }
			add = 1100
		}
		else_if = {
			limit = { has_or_can_pm = { BTYPE = building_logging_camp PM = pm_steam_donkey_building_logging_camp } }
			add = 1000
		}
		if = {
			limit = { has_or_can_pm = { BTYPE = building_logging_camp PM = pm_log_carts } }
			add = 1500
		}
		else_if = {
			limit = { has_or_can_pm = { BTYPE = building_logging_camp PM = pm_rail_transport_building_logging_camp } }
			add = 1000
		}
		multiply = b:building_logging_camp.level
	} }
	if = { limit = { has_building = building_rubber_plantation } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_rubber_plantation PM = pm_steam_rail_transport } }
			add = 1000
		}
		multiply = b:building_rubber_plantation.level
	} }
	if = { limit = { has_building = building_fishing_wharf } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_fishing_wharf PM = pm_flash_freezing_building_fishing_wharf } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_fishing_wharf PM = pm_refrigerated_rail_cars_building_fishing_wharf } }
			add = 2000
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_fishing_wharf PM = pm_refrigerated_storage_building_fishing_wharf } }
			add = 1000
		}
		multiply = b:building_fishing_wharf.level
	} }
	if = { limit = { has_building = building_whaling_station } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_whaling_station PM = pm_flash_freezing_building_whaling_station } }
			add = 3000
		}
		else_if = { limit = { has_or_can_pm = { BTYPE = building_whaling_station PM = pm_refrigerated_rail_cars_building_whaling_station } }
			add = 2000
		}
		else_if = { limit = { has_or_can_pm = {	BTYPE = building_whaling_station PM = pm_refrigerated_storage_building_whaling_station } }
			add = 1000
		}
		multiply = b:building_whaling_station.level
	} }
	if = { limit = { has_building = building_oil_rig } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_oil_rig PM = pm_tanker_cars } }
			add = 2000
		}
		else_if = {
			limit = { has_or_can_pm = { BTYPE = building_oil_rig PM = pm_rail_transport_building_oil_rig } }
			add = 1000
		}
		multiply = b:building_oil_rig.level
	} }
	if = { limit = { has_building = building_railway } add = {
		if = {
			limit = { has_or_can_pm = { BTYPE = building_railway PM = pm_steel_passenger_carriages } }
			add = 1000
		}
		else_if = {
			limit = { has_or_can_pm = { BTYPE = building_railway PM = pm_wooden_passenger_carriages } }
			add = 500
		}
		multiply = b:building_railway.level
	} }

	subtract = state_available_jobs_autopms
}

market_goods_prod_building = {
	if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:ammunition } add = modifier:building_output_ammunition_add subtract = modifier:building_input_ammunition_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:small_arms } add = modifier:building_output_small_arms_add subtract = modifier:building_input_small_arms_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:artillery } add = modifier:building_output_artillery_add subtract = modifier:building_input_artillery_add}
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:tanks } add = modifier:building_output_tanks_add subtract = modifier:building_input_tanks_add}
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:aeroplanes } add = modifier:building_output_aeroplanes_add subtract = modifier:building_input_aeroplanes_add}
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:manowars } add = modifier:building_output_manowars_add subtract = modifier:building_input_manowars_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:ironclads } add = modifier:building_output_ironclads_add subtract = modifier:building_input_ironclads_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:grain } add = modifier:building_output_grain_add subtract = modifier:building_input_grain_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:fish } add = modifier:building_output_fish_add subtract = modifier:building_input_fish_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:fabric } add = modifier:building_output_fabric_add subtract = modifier:building_input_fabric_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:wood } add = modifier:building_output_wood_add subtract = modifier:building_input_wood_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:groceries } add = modifier:building_output_groceries_add subtract = modifier:building_input_groceries_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:clothes } add = modifier:building_output_clothes_add subtract = modifier:building_input_clothes_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:furniture } add = modifier:building_output_furniture_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:paper } add = modifier:building_output_paper_add subtract = modifier:building_input_paper_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:services } add = modifier:building_output_services_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:transportation } add = modifier:building_output_transportation_add subtract = modifier:building_input_transportation_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:electricity } add = modifier:building_output_electricity_add subtract = modifier:building_input_electricity_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:clippers } add = modifier:building_output_clippers_add subtract = modifier:building_input_clippers_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:steamers } add = modifier:building_output_steamers_add subtract = modifier:building_input_steamers_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:silk } add = modifier:building_output_silk_add subtract = modifier:building_input_silk_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:dye } add = modifier:building_output_dye_add subtract = modifier:building_input_dye_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:sulfur } add = modifier:building_output_sulfur_add subtract = modifier:building_input_sulfur_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:coal } add = modifier:building_output_coal_add subtract = modifier:building_input_coal_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:iron } add = modifier:building_output_iron_add subtract = modifier:building_input_iron_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:lead } add = modifier:building_output_lead_add subtract = modifier:building_input_lead_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:hardwood } add = modifier:building_output_hardwood_add subtract = modifier:building_input_hardwood_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:rubber } add = modifier:building_output_rubber_add subtract = modifier:building_input_rubber_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:oil } add = modifier:building_output_oil_add subtract = modifier:building_input_oil_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:engines } add = modifier:building_output_engines_add subtract = modifier:building_input_engines_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:steel } add = modifier:building_output_steel_add subtract = modifier:building_input_steel_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:glass } add = modifier:building_output_glass_add subtract = modifier:building_input_glass_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:fertilizer } add = modifier:building_output_fertilizer_add subtract = modifier:building_input_fertilizer_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:tools } add = modifier:building_output_tools_add subtract = modifier:building_input_tools_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:explosives } add = modifier:building_output_explosives_add subtract = modifier:building_input_explosives_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:porcelain } add = modifier:building_output_porcelain_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:meat } add = modifier:building_output_meat_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:fruit } add = modifier:building_output_fruit_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:liquor } add = modifier:building_output_liquor_add subtract = modifier:building_input_liquor_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:wine } add = modifier:building_output_wine_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:tea } add = modifier:building_output_tea_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:coffee } add = modifier:building_output_coffee_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:sugar } add = modifier:building_output_sugar_add subtract = modifier:building_input_sugar_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:tobacco } add = modifier:building_output_tobacco_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:opium } add = modifier:building_output_opium_add subtract = modifier:building_input_opium_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:automobiles } add = modifier:building_output_automobiles_add subtract = modifier:building_input_automobiles_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:telephones } add = modifier:building_output_telephones_add subtract = modifier:building_input_telephones_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:radios } add = modifier:building_output_radios_add subtract = modifier:building_input_radios_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:luxury_clothes } add = modifier:building_output_luxury_clothes_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:luxury_furniture } add = modifier:building_output_luxury_furniture_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:gold } add = modifier:building_output_gold_add }
	else_if = { limit = { scope:ROOT_GOODS = scope:ROOT_GOODS.market.mg:fine_art } add = modifier:building_output_fine_art_add }
}

market_goods_occupancy_prod_not_hiring = {
	save_temporary_scope_as = ROOT_GOODS
	market.owner = {
		every_scope_building = {
			limit = {
				weekly_profit < 0
				is_subsistence_building = no
				NOT = { is_building_type = building_conscription_center }
				is_government_funded = no
				is_subsidized = no
			}
			add = {
				value = market_goods_prod_building
				if = {
					limit = { occupancy > 0 }
					divide = occupancy
					multiply = { add = 1 subtract = occupancy }
				}
			}
		}
	}
}

market_goods_occupancy_prod_hiring = {
	save_temporary_scope_as = ROOT_GOODS
	market.owner = {
		every_scope_building = {
			limit = {
				is_subsistence_building = no
				NOT = { is_building_type = building_conscription_center }
			}
			add = {
				value = market_goods_prod_building
				if = {
					limit = { occupancy > 0 }
					divide = occupancy
					multiply = { add = 1 subtract = occupancy }
				}
			}
		}
	}
	subtract = market_goods_occupancy_prod_not_hiring 
}

market_goods_mobilization = {
	save_temporary_scope_as = ROOT_GOODS
	market.owner = {
		every_scope_building = {
			limit = {
				OR = { is_building_type = building_barracks is_building_type = building_conscription_center }
				#any_combat_units = { commander ?= { is_mobilized = yes } }
			}
			subtract = {
				every_combat_units = {
					limit = { commander ?= { is_mobilized = yes } }
					add = 1
				}
				#if = { limit = { value <> 0 } save_temp_value
				divide = level
				multiply = market_goods_prod_building
				multiply = modifier:building_mobilization_cost_mult #this modifier is applied only after building_input_*_add
				#value = 1
				#value = level
				#value = market_goods_prod_building
				#multiply = { value = 1 subtract = { value = 1 divide = { value = 1 add = modifier:building_mobilization_cost_mult } } } #(1+k)x=y x+kx=y kx=y-x=y-y/(1+k)=y*(1-1/(1+k))
				#multiply = 0.28571 for 40% mult
			}#}
			if = { limit = { is_building_type = building_conscription_center }
				subtract = market_goods_prod_building
			}
		}
	}
}

player_goods_occupancy_prod = {
	#debug_log_scopes = yes
	#add = { value = 100 desc = "[SCOPE.GetRootScope.GetGoods.GetName]" }
	#player = {
	#scope:country = {
	#scope:market.owner = {
	market.owner = {
		#if = { limit = { ROOT = { key = ammunition } } add = 1000000 }
		every_scope_building = {
			limit = {
				occupancy < 0.99 #for performance
				is_subsistence_building = no
			}
			add = {
				if = { limit = { ROOT = g:ammunition } add = modifier:building_output_ammunition_add subtract = modifier:building_input_ammunition_add }
				else_if = { limit = { ROOT = g:small_arms } add = modifier:building_output_small_arms_add subtract = modifier:building_input_small_arms_add }
				else_if = { limit = { ROOT = g:artillery } add = modifier:building_output_artillery_add subtract = modifier:building_input_artillery_add}
				else_if = { limit = { ROOT = g:tanks } add = modifier:building_output_tanks_add subtract = modifier:building_input_tanks_add}
				else_if = { limit = { ROOT = g:aeroplanes } add = modifier:building_output_aeroplanes_add subtract = modifier:building_input_aeroplanes_add}
				else_if = { limit = { ROOT = g:manowars } add = modifier:building_output_manowars_add subtract = modifier:building_input_manowars_add }
				else_if = { limit = { ROOT = g:ironclads } add = modifier:building_output_ironclads_add subtract = modifier:building_input_ironclads_add }
				else_if = { limit = { ROOT = g:grain } add = modifier:building_output_grain_add subtract = modifier:building_input_grain_add }
				else_if = { limit = { ROOT = g:fish } add = modifier:building_output_fish_add subtract = modifier:building_input_fish_add }
				else_if = { limit = { ROOT = g:fabric } add = modifier:building_output_fabric_add subtract = modifier:building_input_fabric_add }
				else_if = { limit = { ROOT = g:wood } add = modifier:building_output_wood_add subtract = modifier:building_input_wood_add }
				else_if = { limit = { ROOT = g:groceries } add = modifier:building_output_groceries_add subtract = modifier:building_input_groceries_add }
				else_if = { limit = { ROOT = g:clothes } add = modifier:building_output_clothes_add subtract = modifier:building_input_clothes_add }
				else_if = { limit = { ROOT = g:furniture } add = modifier:building_output_furniture_add }
				else_if = { limit = { ROOT = g:paper } add = modifier:building_output_paper_add subtract = modifier:building_input_paper_add }
				else_if = { limit = { ROOT = g:services } add = modifier:building_output_services_add }
				else_if = { limit = { ROOT = g:transportation } add = modifier:building_output_transportation_add subtract = modifier:building_input_transportation_add }
				else_if = { limit = { ROOT = g:electricity } add = modifier:building_output_electricity_add subtract = modifier:building_input_electricity_add }
				else_if = { limit = { ROOT = g:clippers } add = modifier:building_output_clippers_add subtract = modifier:building_input_clippers_add }
				else_if = { limit = { ROOT = g:steamers } add = modifier:building_output_steamers_add subtract = modifier:building_input_steamers_add }
				else_if = { limit = { ROOT = g:silk } add = modifier:building_output_silk_add subtract = modifier:building_input_silk_add }
				else_if = { limit = { ROOT = g:dye } add = modifier:building_output_dye_add subtract = modifier:building_input_dye_add }
				else_if = { limit = { ROOT = g:sulfur } add = modifier:building_output_sulfur_add subtract = modifier:building_input_sulfur_add }
				else_if = { limit = { ROOT = g:coal } add = modifier:building_output_coal_add subtract = modifier:building_input_coal_add }
				else_if = { limit = { ROOT = g:iron } add = modifier:building_output_iron_add subtract = modifier:building_input_iron_add }
				else_if = { limit = { ROOT = g:lead } add = modifier:building_output_lead_add subtract = modifier:building_input_lead_add }
				else_if = { limit = { ROOT = g:hardwood } add = modifier:building_output_hardwood_add subtract = modifier:building_input_hardwood_add }
				else_if = { limit = { ROOT = g:rubber } add = modifier:building_output_rubber_add subtract = modifier:building_input_rubber_add }
				else_if = { limit = { ROOT = g:oil } add = modifier:building_output_oil_add subtract = modifier:building_input_oil_add }
				else_if = { limit = { ROOT = g:engines } add = modifier:building_output_engines_add subtract = modifier:building_input_engines_add }
				else_if = { limit = { ROOT = g:steel } add = modifier:building_output_steel_add subtract = modifier:building_input_steel_add }
				else_if = { limit = { ROOT = g:glass } add = modifier:building_output_glass_add subtract = modifier:building_input_glass_add }
				else_if = { limit = { ROOT = g:fertilizer } add = modifier:building_output_fertilizer_add subtract = modifier:building_input_fertilizer_add }
				else_if = { limit = { ROOT = g:tools } add = modifier:building_output_tools_add subtract = modifier:building_input_tools_add }
				else_if = { limit = { ROOT = g:explosives } add = modifier:building_output_explosives_add subtract = modifier:building_input_explosives_add }
				else_if = { limit = { ROOT = g:porcelain } add = modifier:building_output_porcelain_add }
				else_if = { limit = { ROOT = g:meat } add = modifier:building_output_meat_add }
				else_if = { limit = { ROOT = g:fruit } add = modifier:building_output_fruit_add }
				else_if = { limit = { ROOT = g:liquor } add = modifier:building_output_liquor_add subtract = modifier:building_input_liquor_add }
				else_if = { limit = { ROOT = g:wine } add = modifier:building_output_wine_add }
				else_if = { limit = { ROOT = g:tea } add = modifier:building_output_tea_add }
				else_if = { limit = { ROOT = g:coffee } add = modifier:building_output_coffee_add }
				else_if = { limit = { ROOT = g:sugar } add = modifier:building_output_sugar_add subtract = modifier:building_input_sugar_add }
				else_if = { limit = { ROOT = g:tobacco } add = modifier:building_output_tobacco_add }
				else_if = { limit = { ROOT = g:opium } add = modifier:building_output_opium_add subtract = modifier:building_input_opium_add }
				else_if = { limit = { ROOT = g:automobiles } add = modifier:building_output_automobiles_add subtract = modifier:building_input_automobiles_add }
				else_if = { limit = { ROOT = g:telephones } add = modifier:building_output_telephones_add subtract = modifier:building_input_telephones_add }
				else_if = { limit = { ROOT = g:radios } add = modifier:building_output_radios_add subtract = modifier:building_input_radios_add }
				else_if = { limit = { ROOT = g:luxury_clothes } add = modifier:building_output_luxury_clothes_add }
				else_if = { limit = { ROOT = g:luxury_furniture } add = modifier:building_output_luxury_furniture_add }
				else_if = { limit = { ROOT = g:gold } add = modifier:building_output_gold_add }
				else_if = { limit = { ROOT = g:fine_art } add = modifier:building_output_fine_art_add }
				if = {
					limit = { occupancy > 0 }
					divide = occupancy
					multiply = { add = 1 subtract = occupancy }
				}
			}
		}
	}
}

state_jobs_not_hiring = {
	every_scope_building = {
		limit = {
			OR = {
				NOT = { is_building_type = building_conscription_center }
				state = { has_active_building = building_conscription_center }
			}
			is_government_funded = no
			weekly_profit < 0
			is_subsidized = no
			is_subsistence_building = no
		}
		add = {
			add = building_total_jobs
			multiply = { add = 1 subtract = occupancy } 
		}
	}
}

state_available_jobs_hiring = {
	add = state_available_jobs
	subtract = state_jobs_not_hiring
}

state_unemployed_not_hiring = {
	add = state_unemployed
	subtract = state_available_jobs_hiring
}

state_next_hire = {
	every_scope_building = {
		limit = {
			OR = {
				NOT = { is_building_type = building_conscription_center }
				state = { has_active_building = building_conscription_center }
			}
			OR = {
				is_government_funded = yes
				weekly_profit >= 0
				is_subsidized = yes
			}
			is_subsistence_building = no
		}
		add = {
			add = building_total_jobs
			if = {
				limit = {
					modifier:building_training_rate_add > 0
				}
				multiply = { add = 1 subtract = occupancy }
				max = modifier:building_training_rate_add
			}
			else = {
				multiply = {
					add = 0.1
					max = { add = 1 subtract = occupancy }
				}
			}
		}
	}
}

state_available_workers_next_hire = {
	value = state_available_workers
	subtract = state_next_hire
}

state_next_available_workers_all_hiring = {
	value = state_available_workers
	subtract = state_available_jobs_hiring
}

port_infra_prod_per_level = {
	if = { limit = { has_active_production_method = pm_basic_port } add = 5 }
	else_if = { limit = { has_active_production_method = pm_industrial_port } add = 7.5 }
	else_if = { limit = { has_active_production_method = pm_modern_port } add = 10 }
}


railway_infra_prod_per_level = {
	if = { limit = { has_active_production_method = pm_steam_trains } add = 20 }
	else_if = { limit = { has_active_production_method = pm_electric_trains } add = 30 }
	else_if = { limit = { has_active_production_method = pm_diesel_trains } add = 40 }
	if = { limit = { has_active_production_method = pm_wooden_passenger_carriages } add = -5 }
	else_if = { limit = { has_active_production_method = pm_steel_passenger_carriages } add = -5 }
}

building_infra_prod_per_level = {
	add = port_infra_prod_per_level 
	add = railway_infra_prod_per_level 
}

state_port_infra_prod_per_level = {
	if = {
		limit = {
			exists = b:building_port
		}
		b:building_port = {
			add = port_infra_prod_per_level
		}
	}
}

state_railway_infra_prod_per_level = {
	if = {
		limit = {
			exists = b:building_railway
		}
		b:building_railway = {
			add = railway_infra_prod_per_level
		}
	}
}

building_infra_usage_per_level = {
	if = { limit = { OR = {
		is_building_group = bg_trade
	} } value = 0.1 }
	else_if = { limit = { OR = {
		is_building_group = bg_military
	} } value = 0.2 }
	else_if = { limit = { OR = {
		is_building_group = bg_arts
	} } value = 0.5 }
	else_if = { limit = { OR = {
		is_building_group = bg_agriculture
		is_building_group = bg_ranching
		is_building_group = bg_plantations
		is_building_group = bg_logging
		is_building_group = bg_rubber
		is_building_group = bg_whaling
		is_building_group = bg_fishing
		is_building_group = bg_government
	} } value = 1 }
	else_if = { limit = { OR = {
		is_building_group = bg_mining
		is_building_group = bg_oil_extraction
		is_building_group = bg_urban_facilities
		is_building_group = bg_light_industry
		is_building_group = bg_construction
	} } value = 2 }
	else_if = { limit = { OR = {
		is_building_group = bg_heavy_industry
	} } value = 3 }
	else = { value = 0 }
}

building_levelq = {
	if = { limit = { is_under_construction = no } value = 0 }
	else_if = { limit = { is_building_type = building_food_industry } state = { if = { limit = { exists = var:building_food_industry_levelq } value ?= var:building_food_industry_levelq } } }
	else_if = { limit = { is_building_type = building_textile_mills } state = { if = { limit = { exists = var:building_textile_mills_levelq } value ?= var:building_textile_mills_levelq } } }
	else_if = { limit = { is_building_type = building_furniture_manufacturies } state = { if = { limit = { exists = var:building_furniture_manufacturies_levelq } value ?= var:building_furniture_manufacturies_levelq } } }
	else_if = { limit = { is_building_type = building_glassworks } state = { if = { limit = { exists = var:building_glassworks_levelq } value ?= var:building_glassworks_levelq } } }
	else_if = { limit = { is_building_type = building_tooling_workshops } state = { if = { limit = { exists = var:building_tooling_workshops_levelq } value ?= var:building_tooling_workshops_levelq } } }
	else_if = { limit = { is_building_type = building_paper_mills } state = { if = { limit = { exists = var:building_paper_mills_levelq } value ?= var:building_paper_mills_levelq } } }
	else_if = { limit = { is_building_type = building_chemical_plants } state = { if = { limit = { exists = var:building_chemical_plants_levelq } value ?= var:building_chemical_plants_levelq } } }
	else_if = { limit = { is_building_type = building_synthetics_plants } state = { if = { limit = { exists = var:building_synthetics_plants_levelq } value ?= var:building_synthetics_plants_levelq } } }
	else_if = { limit = { is_building_type = building_steel_mills } state = { if = { limit = { exists = var:building_steel_mills_levelq } value ?= var:building_steel_mills_levelq } } }
	else_if = { limit = { is_building_type = building_motor_industry } state = { if = { limit = { exists = var:building_motor_industry_levelq } value ?= var:building_motor_industry_levelq } } }
	else_if = { limit = { is_building_type = building_shipyards } state = { if = { limit = { exists = var:building_shipyards_levelq } value ?= var:building_shipyards_levelq } } }
	else_if = { limit = { is_building_type = building_war_machine_industry } state = { if = { limit = { exists = var:building_war_machine_industry_levelq } value ?= var:building_war_machine_industry_levelq } } }
	else_if = { limit = { is_building_type = building_electrics_industry } state = { if = { limit = { exists = var:building_electrics_industry_levelq } value ?= var:building_electrics_industry_levelq } } }
	else_if = { limit = { is_building_type = building_arms_industry } state = { if = { limit = { exists = var:building_arms_industry_levelq } value ?= var:building_arms_industry_levelq } } }
	else_if = { limit = { is_building_type = building_munition_plants } state = { if = { limit = { exists = var:building_munition_plants_levelq } value ?= var:building_munition_plants_levelq } } }
	else_if = { limit = { is_building_type = building_rye_farm } state = { if = { limit = { exists = var:building_rye_farm_levelq } value ?= var:building_rye_farm_levelq } } }
	else_if = { limit = { is_building_type = building_wheat_farm } state = { if = { limit = { exists = var:building_wheat_farm_levelq } value ?= var:building_wheat_farm_levelq } } }
	else_if = { limit = { is_building_type = building_rice_farm } state = { if = { limit = { exists = var:building_rice_farm_levelq } value ?= var:building_rice_farm_levelq } } }
	else_if = { limit = { is_building_type = building_maize_farm } state = { if = { limit = { exists = var:building_maize_farm_levelq } value ?= var:building_maize_farm_levelq } } }
	else_if = { limit = { is_building_type = building_millet_farm } state = { if = { limit = { exists = var:building_millet_farm_levelq } value ?= var:building_millet_farm_levelq } } }
	else_if = { limit = { is_building_type = building_livestock_ranch } state = { if = { limit = { exists = var:building_livestock_ranch_levelq } value ?= var:building_livestock_ranch_levelq } } }
	else_if = { limit = { is_building_type = building_coal_mine } state = { if = { limit = { exists = var:building_coal_mine_levelq } value ?= var:building_coal_mine_levelq } } }
	else_if = { limit = { is_building_type = building_iron_mine } state = { if = { limit = { exists = var:building_iron_mine_levelq } value ?= var:building_iron_mine_levelq } } }
	else_if = { limit = { is_building_type = building_lead_mine } state = { if = { limit = { exists = var:building_lead_mine_levelq } value ?= var:building_lead_mine_levelq } } }
	else_if = { limit = { is_building_type = building_sulfur_mine } state = { if = { limit = { exists = var:building_sulfur_mine_levelq } value ?= var:building_sulfur_mine_levelq } } }
	else_if = { limit = { is_building_type = building_gold_mine } state = { if = { limit = { exists = var:building_gold_mine_levelq } value ?= var:building_gold_mine_levelq } } }
	else_if = { limit = { is_building_type = building_gold_fields } state = { if = { limit = { exists = var:building_gold_fields_levelq } value ?= var:building_gold_fields_levelq } } }
	else_if = { limit = { is_building_type = building_coffee_plantation } state = { if = { limit = { exists = var:building_coffee_plantation_levelq } value ?= var:building_coffee_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_cotton_plantation } state = { if = { limit = { exists = var:building_cotton_plantation_levelq } value ?= var:building_cotton_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_dye_plantation } state = { if = { limit = { exists = var:building_dye_plantation_levelq } value ?= var:building_dye_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_opium_plantation } state = { if = { limit = { exists = var:building_opium_plantation_levelq } value ?= var:building_opium_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_tea_plantation } state = { if = { limit = { exists = var:building_tea_plantation_levelq } value ?= var:building_tea_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_tobacco_plantation } state = { if = { limit = { exists = var:building_tobacco_plantation_levelq } value ?= var:building_tobacco_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_sugar_plantation } state = { if = { limit = { exists = var:building_sugar_plantation_levelq } value ?= var:building_sugar_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_banana_plantation } state = { if = { limit = { exists = var:building_banana_plantation_levelq } value ?= var:building_banana_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_silk_plantation } state = { if = { limit = { exists = var:building_silk_plantation_levelq } value ?= var:building_silk_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_barracks } state = { if = { limit = { exists = var:building_barracks_levelq } value ?= var:building_barracks_levelq } } }
	else_if = { limit = { is_building_type = building_conscription_center } state = { if = { limit = { exists = var:building_conscription_center_levelq } value ?= var:building_conscription_center_levelq } } }
	else_if = { limit = { is_building_type = building_naval_base } state = { if = { limit = { exists = var:building_naval_base_levelq } value ?= var:building_naval_base_levelq } } }
	else_if = { limit = { is_building_type = building_urban_center } state = { if = { limit = { exists = var:building_urban_center_levelq } value ?= var:building_urban_center_levelq } } }
	else_if = { limit = { is_building_type = building_arts_academy } state = { if = { limit = { exists = var:building_arts_academy_levelq } value ?= var:building_arts_academy_levelq } } }
	else_if = { limit = { is_building_type = building_power_plant } state = { if = { limit = { exists = var:building_power_plant_levelq } value ?= var:building_power_plant_levelq } } }
	else_if = { limit = { is_building_type = building_port } state = { if = { limit = { exists = var:building_port_levelq } value ?= var:building_port_levelq } } }
	else_if = { limit = { is_building_type = building_government_administration } state = { if = { limit = { exists = var:building_government_administration_levelq } value ?= var:building_government_administration_levelq } } }
	else_if = { limit = { is_building_type = building_university } state = { if = { limit = { exists = var:building_university_levelq } value ?= var:building_university_levelq } } }
	else_if = { limit = { is_building_type = building_skyscraper } state = { if = { limit = { exists = var:building_skyscraper_levelq } value ?= var:building_skyscraper_levelq } } }
	else_if = { limit = { is_building_type = building_logging_camp } state = { if = { limit = { exists = var:building_logging_camp_levelq } value ?= var:building_logging_camp_levelq } } }
	else_if = { limit = { is_building_type = building_rubber_plantation } state = { if = { limit = { exists = var:building_rubber_plantation_levelq } value ?= var:building_rubber_plantation_levelq } } }
	else_if = { limit = { is_building_type = building_fishing_wharf } state = { if = { limit = { exists = var:building_fishing_wharf_levelq } value ?= var:building_fishing_wharf_levelq } } }
	else_if = { limit = { is_building_type = building_whaling_station } state = { if = { limit = { exists = var:building_whaling_station_levelq } value ?= var:building_whaling_station_levelq } } }
	else_if = { limit = { is_building_type = building_oil_rig } state = { if = { limit = { exists = var:building_oil_rig_levelq } value ?= var:building_oil_rig_levelq } } }
	else_if = { limit = { is_building_type = building_suez_canal } state = { if = { limit = { exists = var:building_suez_canal_levelq } value ?= var:building_suez_canal_levelq } } }
	else_if = { limit = { is_building_type = building_panama_canal } state = { if = { limit = { exists = var:building_panama_canal_levelq } value ?= var:building_panama_canal_levelq } } }
	else_if = { limit = { is_building_type = building_railway } state = { if = { limit = { exists = var:building_railway_levelq } value ?= var:building_railway_levelq } } }
	else_if = { limit = { is_building_type = building_trade_center } state = { if = { limit = { exists = var:building_trade_center_levelq } value ?= var:building_trade_center_levelq } } }
	else_if = { limit = { is_building_type = building_construction_sector } state = { if = { limit = { exists = var:building_construction_sector_levelq } value ?= var:building_construction_sector_levelq } } }
	else_if = { limit = { is_building_type = building_construction_sector } state = { if = { limit = { exists = var:building_construction_sector_levelq } value ?= var:building_construction_sector_levelq } } }
	else_if = { limit = { is_building_type = building_eiffel_tower } state = { if = { limit = { exists = var:building_eiffel_tower_levelq } value ?= var:building_eiffel_tower_levelq } } }
	else_if = { limit = { is_building_type = building_angkor_wat } state = { if = { limit = { exists = var:building_angkor_wat_levelq } value ?= var:building_angkor_wat_levelq } } }
	else_if = { limit = { is_building_type = building_big_ben } state = { if = { limit = { exists = var:building_big_ben_levelq } value ?= var:building_big_ben_levelq } } }
	else_if = { limit = { is_building_type = building_forbidden_city } state = { if = { limit = { exists = var:building_forbidden_city_levelq } value ?= var:building_forbidden_city_levelq } } }
	else_if = { limit = { is_building_type = building_hagia_sophia } state = { if = { limit = { exists = var:building_hagia_sophia_levelq } value ?= var:building_hagia_sophia_levelq } } }
	else_if = { limit = { is_building_type = building_mosque_of_djenne } state = { if = { limit = { exists = var:building_mosque_of_djenne_levelq } value ?= var:building_mosque_of_djenne_levelq } } }
	else_if = { limit = { is_building_type = building_saint_basils_cathedral } state = { if = { limit = { exists = var:building_saint_basils_cathedral_levelq } value ?= var:building_saint_basils_cathedral_levelq } } }
	else_if = { limit = { is_building_type = building_statue_of_liberty } state = { if = { limit = { exists = var:building_statue_of_liberty_levelq } value ?= var:building_statue_of_liberty_levelq } } }
	else_if = { limit = { is_building_type = building_taj_mahal } state = { if = { limit = { exists = var:building_taj_mahal_levelq } value ?= var:building_taj_mahal_levelq } } }
	else_if = { limit = { is_building_type = building_vatican_city } state = { if = { limit = { exists = var:building_vatican_city_levelq } value ?= var:building_vatican_city_levelq } } }
	else_if = { limit = { is_building_type = building_white_house } state = { if = { limit = { exists = var:building_white_house_levelq } value ?= var:building_white_house_levelq } } }
	else_if = { limit = { is_building_type = building_machu_picchu } state = { if = { limit = { exists = var:building_machu_picchu_levelq } value ?= var:building_machu_picchu_levelq } } }
	else_if = { limit = { is_building_type = building_argebam } state = { if = { limit = { exists = var:building_argebam_levelq } value ?= var:building_argebam_levelq } } }
	else_if = { limit = { is_building_type = building_chichen_itza } state = { if = { limit = { exists = var:building_chichen_itza_levelq } value ?= var:building_chichen_itza_levelq } } }
	else_if = { limit = { is_building_type = building_easter_island_heads } state = { if = { limit = { exists = var:building_easter_island_heads_levelq } value ?= var:building_easter_island_heads_levelq } } }
	else_if = { limit = { is_building_type = building_eye_of_sahara } state = { if = { limit = { exists = var:building_eye_of_sahara_levelq } value ?= var:building_eye_of_sahara_levelq } } }
	else_if = { limit = { is_building_type = building_giza_necropolis } state = { if = { limit = { exists = var:building_giza_necropolis_levelq } value ?= var:building_giza_necropolis_levelq } } }
	else_if = { limit = { is_building_type = building_khaju_bridge } state = { if = { limit = { exists = var:building_khaju_bridge_levelq } value ?= var:building_khaju_bridge_levelq } } }
	else_if = { limit = { is_building_type = building_petra } state = { if = { limit = { exists = var:building_petra_levelq } value ?= var:building_petra_levelq } } }
	else_if = { limit = { is_building_type = building_capitol_hill } state = { if = { limit = { exists = var:building_capitol_hill_levelq } value ?= var:building_capitol_hill_levelq } } }
	else_if = { limit = { is_building_type = building_central_park } state = { if = { limit = { exists = var:building_central_park_levelq } value ?= var:building_central_park_levelq } } }
	else_if = { limit = { is_building_type = building_martandsuntemple } state = { if = { limit = { exists = var:building_martandsuntemple_levelq } value ?= var:building_martandsuntemple_levelq } } }
	else_if = { limit = { is_building_type = building_observatorygreenwich } state = { if = { limit = { exists = var:building_observatorygreenwich_levelq } value ?= var:building_observatorygreenwich_levelq } } }
	else_if = { limit = { is_building_type = building_temple_of_poseidon } state = { if = { limit = { exists = var:building_temple_of_poseidon_levelq } value ?= var:building_temple_of_poseidon_levelq } } }
	else_if = { limit = { is_building_type = building_wat_arun } state = { if = { limit = { exists = var:building_wat_arun_levelq } value ?= var:building_wat_arun_levelq } } }
	else_if = { limit = { is_building_type = building_subsistence_farms } state = { if = { limit = { exists = var:building_subsistence_farms_levelq } value ?= var:building_subsistence_farms_levelq } } }
	else_if = { limit = { is_building_type = building_subsistence_orchards } state = { if = { limit = { exists = var:building_subsistence_orchards_levelq } value ?= var:building_subsistence_orchards_levelq } } }
	else_if = { limit = { is_building_type = building_subsistence_pastures } state = { if = { limit = { exists = var:building_subsistence_pastures_levelq } value ?= var:building_subsistence_pastures_levelq } } }
	else_if = { limit = { is_building_type = building_subsistence_fishing_villages } state = { if = { limit = { exists = var:building_subsistence_fishing_villages_levelq } value ?= var:building_subsistence_fishing_villages_levelq } } }
	else_if = { limit = { is_building_type = building_subsistence_rice_paddies } state = { if = { limit = { exists = var:building_subsistence_rice_paddies_levelq } value ?= var:building_subsistence_rice_paddies_levelq } } }
}

state_infra_usage_queued = {
	every_scope_building = {
		limit = {
			is_under_construction = yes
		}
		add = {
			value = building_infra_usage_per_level
			multiply = building_levelq
		}
	}
}

state_infra_prog = {
	value = infrastructure
	subtract = infrastructure_usage
	subtract = state_infra_usage_queued
	add = {
		if = { limit = { exists = b:building_port }
			b:building_port ?= {
				add = {
					value = port_infra_prod_per_level
					multiply = { 
						value = building_levelq
						add = {
							value = level
							multiply = { value = 1 subtract = occupancy }
						}
					}
					multiply = { value = 1 add = modifier:building_port_throughput_mult }
				}
			}
		}
		if = { limit = { exists = b:building_railway }
			b:building_railway ?= {
				add = {
					value = railway_infra_prod_per_level
					multiply = { 
						value = building_levelq
						add = {
							value = level
							multiply = { value = 1 subtract = occupancy }
						}
					}
					multiply = { value = 1 add = modifier:building_railway_throughput_mult }
				}
			}
		}
		multiply = {
			value = 1
			add = modifier:state_infrastructure_mult
		}
	}
}

building_group_throughput_mult = {
	if = { limit = { is_building_group = bg_agriculture } value = modifier:building_group_bg_agriculture_throughput_mult }
	else_if = { limit = { is_building_group = bg_ranching } value = modifier:building_group_bg_ranching_throughput_mult }
	else_if = { limit = { is_building_group = bg_mining } value = modifier:building_group_bg_mining_throughput_mult }
	else_if = { limit = { is_building_group = bg_plantations } value = modifier:building_group_bg_plantations_throughput_mult }
	else_if = { limit = { is_building_group = bg_manufacturing } value = modifier:building_group_bg_manufacturing_throughput_mult }
	else_if = { limit = { is_building_group = bg_service } value = modifier:building_group_bg_service_throughput_mult }
	else_if = { limit = { is_building_group = bg_oil_extraction } value = modifier:building_group_bg_oil_extraction_throughput_mult }
	else_if = { limit = { is_building_group = bg_logging } value = modifier:building_group_bg_logging_throughput_mult }
	else_if = { limit = { is_building_group = bg_fishing } value = modifier:building_group_bg_fishing_throughput_mult }
	else_if = { limit = { is_building_group = bg_whaling } value = modifier:building_group_bg_whaling_throughput_mult }
}

building_type_throughput_mult = {
	if = { limit = { is_building_type = building_food_industry } value = modifier:building_food_industry_throughput_mult }
	else_if = { limit = { is_building_type = building_textile_mills } value = modifier:building_textile_mills_throughput_mult }
	else_if = { limit = { is_building_type = building_furniture_manufacturies } value = modifier:building_furniture_manufacturies_throughput_mult }
	else_if = { limit = { is_building_type = building_glassworks } value = modifier:building_glassworks_throughput_mult }
	else_if = { limit = { is_building_type = building_tooling_workshops } value = modifier:building_tooling_workshops_throughput_mult }
	else_if = { limit = { is_building_type = building_paper_mills } value = modifier:building_paper_mills_throughput_mult }
	else_if = { limit = { is_building_type = building_chemical_plants } value = modifier:building_chemical_plants_throughput_mult }
	else_if = { limit = { is_building_type = building_synthetics_plants } value = modifier:building_synthetics_plants_throughput_mult }
	else_if = { limit = { is_building_type = building_steel_mills } value = modifier:building_steel_mills_throughput_mult }
	else_if = { limit = { is_building_type = building_motor_industry } value = modifier:building_motor_industry_throughput_mult }
	else_if = { limit = { is_building_type = building_shipyards } value = modifier:building_shipyards_throughput_mult }
	else_if = { limit = { is_building_type = building_war_machine_industry } value = modifier:building_war_machine_industry_throughput_mult }
	else_if = { limit = { is_building_type = building_electrics_industry } value = modifier:building_electrics_industry_throughput_mult }
	else_if = { limit = { is_building_type = building_arms_industry } value = modifier:building_arms_industry_throughput_mult }
	else_if = { limit = { is_building_type = building_munition_plants } value = modifier:building_munition_plants_throughput_mult }
	else_if = { limit = { is_building_type = building_rye_farm } value = modifier:building_rye_farm_throughput_mult }
	else_if = { limit = { is_building_type = building_wheat_farm } value = modifier:building_wheat_farm_throughput_mult }
	else_if = { limit = { is_building_type = building_rice_farm } value = modifier:building_rice_farm_throughput_mult }
	else_if = { limit = { is_building_type = building_maize_farm } value = modifier:building_maize_farm_throughput_mult }
	else_if = { limit = { is_building_type = building_millet_farm } value = modifier:building_millet_farm_throughput_mult }
	else_if = { limit = { is_building_type = building_livestock_ranch } value = modifier:building_livestock_ranch_throughput_mult }
	else_if = { limit = { is_building_type = building_coal_mine } value = modifier:building_coal_mine_throughput_mult }
	else_if = { limit = { is_building_type = building_iron_mine } value = modifier:building_iron_mine_throughput_mult }
	else_if = { limit = { is_building_type = building_lead_mine } value = modifier:building_lead_mine_throughput_mult }
	else_if = { limit = { is_building_type = building_sulfur_mine } value = modifier:building_sulfur_mine_throughput_mult }
	else_if = { limit = { is_building_type = building_gold_mine } value = modifier:building_gold_mine_throughput_mult }
	else_if = { limit = { is_building_type = building_gold_fields } value = modifier:building_gold_fields_throughput_mult }
	else_if = { limit = { is_building_type = building_coffee_plantation } value = modifier:building_coffee_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_cotton_plantation } value = modifier:building_cotton_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_dye_plantation } value = modifier:building_dye_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_opium_plantation } value = modifier:building_opium_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_tea_plantation } value = modifier:building_tea_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_tobacco_plantation } value = modifier:building_tobacco_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_sugar_plantation } value = modifier:building_sugar_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_banana_plantation } value = modifier:building_banana_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_silk_plantation } value = modifier:building_silk_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_barracks } value = modifier:building_barracks_throughput_mult }
	else_if = { limit = { is_building_type = building_conscription_center } value = modifier:building_conscription_center_throughput_mult }
	else_if = { limit = { is_building_type = building_naval_base } value = modifier:building_naval_base_throughput_mult }
	else_if = { limit = { is_building_type = building_urban_center } value = modifier:building_urban_center_throughput_mult }
	else_if = { limit = { is_building_type = building_arts_academy } value = modifier:building_arts_academy_throughput_mult }
	else_if = { limit = { is_building_type = building_power_plant } value = modifier:building_power_plant_throughput_mult }
	else_if = { limit = { is_building_type = building_port } value = modifier:building_port_throughput_mult }
	else_if = { limit = { is_building_type = building_government_administration } value = modifier:building_government_administration_throughput_mult }
	else_if = { limit = { is_building_type = building_university } value = modifier:building_university_throughput_mult }
	else_if = { limit = { is_building_type = building_skyscraper } value = modifier:building_skyscraper_throughput_mult }
	else_if = { limit = { is_building_type = building_logging_camp } value = modifier:building_logging_camp_throughput_mult }
	else_if = { limit = { is_building_type = building_rubber_plantation } value = modifier:building_rubber_plantation_throughput_mult }
	else_if = { limit = { is_building_type = building_fishing_wharf } value = modifier:building_fishing_wharf_throughput_mult }
	else_if = { limit = { is_building_type = building_whaling_station } value = modifier:building_whaling_station_throughput_mult }
	else_if = { limit = { is_building_type = building_oil_rig } value = modifier:building_oil_rig_throughput_mult }
	else_if = { limit = { is_building_type = building_suez_canal } value = modifier:building_suez_canal_throughput_mult }
	else_if = { limit = { is_building_type = building_panama_canal } value = modifier:building_panama_canal_throughput_mult }
	else_if = { limit = { is_building_type = building_railway } value = modifier:building_railway_throughput_mult }
	else_if = { limit = { is_building_type = building_trade_center } value = modifier:building_trade_center_throughput_mult }
	else_if = { limit = { is_building_type = building_construction_sector } value = modifier:building_construction_sector_throughput_mult }
	else_if = { limit = { is_building_type = building_construction_sector } value = modifier:building_construction_sector_throughput_mult }
	else_if = { limit = { is_building_type = building_eiffel_tower } value = modifier:building_eiffel_tower_throughput_mult }
	else_if = { limit = { is_building_type = building_angkor_wat } value = modifier:building_angkor_wat_throughput_mult }
	else_if = { limit = { is_building_type = building_big_ben } value = modifier:building_big_ben_throughput_mult }
	else_if = { limit = { is_building_type = building_forbidden_city } value = modifier:building_forbidden_city_throughput_mult }
	else_if = { limit = { is_building_type = building_hagia_sophia } value = modifier:building_hagia_sophia_throughput_mult }
	else_if = { limit = { is_building_type = building_mosque_of_djenne } value = modifier:building_mosque_of_djenne_throughput_mult }
	else_if = { limit = { is_building_type = building_saint_basils_cathedral } value = modifier:building_saint_basils_cathedral_throughput_mult }
	else_if = { limit = { is_building_type = building_statue_of_liberty } value = modifier:building_statue_of_liberty_throughput_mult }
	else_if = { limit = { is_building_type = building_taj_mahal } value = modifier:building_taj_mahal_throughput_mult }
	else_if = { limit = { is_building_type = building_vatican_city } value = modifier:building_vatican_city_throughput_mult }
	else_if = { limit = { is_building_type = building_white_house } value = modifier:building_white_house_throughput_mult }
	else_if = { limit = { is_building_type = building_machu_picchu } value = modifier:building_machu_picchu_throughput_mult }
	else_if = { limit = { is_building_type = building_argebam } value = modifier:building_argebam_throughput_mult }
	else_if = { limit = { is_building_type = building_chichen_itza } value = modifier:building_chichen_itza_throughput_mult }
	else_if = { limit = { is_building_type = building_easter_island_heads } value = modifier:building_easter_island_heads_throughput_mult }
	else_if = { limit = { is_building_type = building_eye_of_sahara } value = modifier:building_eye_of_sahara_throughput_mult }
	else_if = { limit = { is_building_type = building_giza_necropolis } value = modifier:building_giza_necropolis_throughput_mult }
	else_if = { limit = { is_building_type = building_khaju_bridge } value = modifier:building_khaju_bridge_throughput_mult }
	else_if = { limit = { is_building_type = building_petra } value = modifier:building_petra_throughput_mult }
	else_if = { limit = { is_building_type = building_capitol_hill } value = modifier:building_capitol_hill_throughput_mult }
	else_if = { limit = { is_building_type = building_central_park } value = modifier:building_central_park_throughput_mult }
	else_if = { limit = { is_building_type = building_martandsuntemple } value = modifier:building_martandsuntemple_throughput_mult }
	else_if = { limit = { is_building_type = building_observatorygreenwich } value = modifier:building_observatorygreenwich_throughput_mult }
	else_if = { limit = { is_building_type = building_temple_of_poseidon } value = modifier:building_temple_of_poseidon_throughput_mult }
	else_if = { limit = { is_building_type = building_wat_arun } value = modifier:building_wat_arun_throughput_mult }
	else_if = { limit = { is_building_type = building_subsistence_farms } value = modifier:building_subsistence_farms_throughput_mult }
	else_if = { limit = { is_building_type = building_subsistence_orchards } value = modifier:building_subsistence_orchards_throughput_mult }
	else_if = { limit = { is_building_type = building_subsistence_pastures } value = modifier:building_subsistence_pastures_throughput_mult }
	else_if = { limit = { is_building_type = building_subsistence_fishing_villages } value = modifier:building_subsistence_fishing_villages_throughput_mult }
	else_if = { limit = { is_building_type = building_subsistence_rice_paddies } value = modifier:building_subsistence_rice_paddies_throughput_mult }
}

buidling_scale_throughput_mult = {
	if = { limit = { OR = { is_building_group = bg_infrastructure is_building_group = bg_military is_subsistence_building = yes } }
		value = 0
	}
	else = {
		value = level
		subtract = 1
		min = 0
		max = modifier:building_economy_of_scale_level_cap_add
		divide = 100
	}
}

buidling_scale_throughput_mult_prog = {
	if = { limit = { OR = { is_building_group = bg_infrastructure is_building_group = bg_military is_subsistence_building = yes } }
		value = 0
	}
	else = {
		value = level
		if = { limit = { is_under_construction = yes } add = building_levelq }
		subtract = 1
		min = 0
		max = modifier:building_economy_of_scale_level_cap_add
		divide = 100
	}
}

building_throughput_mult = {
	state = {
		if = { limit = {  is_incorporated = no } 
			add = modifier:building_unincorporated_throughput_add
		}
	}
	add = building_group_throughput_mult
	add = modifier:building_throughput_mult
	add = building_type_throughput_mult
	#add = modifier:building_throughput_oil_mult

}

building_noscale_throughput_mult = {
	value = building_throughput_mult
	subtract = buidling_scale_throughput_mult
}

building_throughput_mult_prog = {
	value = building_noscale_throughput_mult
	add = buidling_scale_throughput_mult_prog
}

building_group_employee_mult = {
	if = { limit = { is_building_group = bg_service } value = modifier:building_group_bg_service_employee_mult }
	else_if = { limit = { is_building_group = bg_agriculture } value = modifier:building_group_bg_agriculture_employee_mult }
	else_if = { limit = { is_building_group = bg_plantations } value = modifier:building_group_bg_plantations_employee_mult }
	else_if = { limit = { is_building_group = bg_mining } value = modifier:building_group_bg_mining_employee_mult }
	else_if = { limit = { is_building_group = bg_gold_mining } value = modifier:building_group_bg_gold_mining_employee_mult }
	else_if = { limit = { is_building_group = bg_coal_mining } value = modifier:building_group_bg_coal_mining_employee_mult }
	else_if = { limit = { is_building_group = bg_iron_mining } value = modifier:building_group_bg_iron_mining_employee_mult }
	else_if = { limit = { is_building_group = bg_lead_mining } value = modifier:building_group_bg_lead_mining_employee_mult }
	else_if = { limit = { is_building_group = bg_sulfur_mining } value = modifier:building_group_bg_sulfur_mining_employee_mult }
	else_if = { limit = { is_building_group = bg_rubber } value = modifier:building_group_bg_rubber_employee_mult }
	else_if = { limit = { is_building_group = bg_logging } value = modifier:building_group_bg_logging_employee_mult }
	else_if = { limit = { is_building_group = bg_fishing } value = modifier:building_group_bg_fishing_employee_mult }
	else_if = { limit = { is_building_group = bg_whaling } value = modifier:building_group_bg_whaling_employee_mult }
	else_if = { limit = { is_building_group = bg_oil_extraction } value = modifier:building_group_bg_oil_extraction_employee_mult }
	else_if = { limit = { is_building_group = bg_manufacturing } value = modifier:building_group_bg_manufacturing_employee_mult }
	else_if = { limit = { is_building_group = bg_government } value = modifier:building_group_bg_government_employee_mult }
	else_if = { limit = { is_building_group = bg_infrastructure } value = modifier:building_group_bg_infrastructure_employee_mult }
}

state_jobs_construction = {
	every_scope_building = {
		limit = {
			is_subsistence_building = no
			is_under_construction = yes
		}
		add = {
			value = building_employment
			multiply = building_levelq
			multiply = { value = 1 add = building_group_employee_mult }
		}
	}
}

state_available_workers_prog = {
	value = state_next_available_workers_all_hiring
	subtract = state_jobs_construction
	if = { limit = { exists = global_var:gui_states_jobs_not_hiring } subtract = state_jobs_not_hiring }
	if = { limit = { exists = global_var:gui_states_workers_autopms } add = state_available_workers_autopms }
}

state_available_workers_prog_wcache = {
	value = state_next_available_workers_all_hiring
	subtract = state_jobs_construction
	if = { limit = { exists = global_var:gui_states_jobs_not_hiring } subtract = state_jobs_not_hiring }
	if = { limit = { exists = global_var:gui_states_workers_autopms exists = var:cache_available_workers_autopms } add = var:cache_available_workers_autopms }
}

building_avg_wage = {
	#if earnings are 0 they may actually be negative and calculation will be incorrect
	if = { limit = { building_total_jobs > 0 occupancy > 0 earnings > 0 }
		value = earnings
		subtract = {
			value = weekly_profit
			multiply = 52
			divide = building_total_jobs
			divide = occupancy
		}
	} else = { value = 0 }
}

#values below are currently cached with the same name
#estimate - doesn't include discrimination factor and uneven occupancy because this will take a lot of CPU iterating through pops
#building_base_wage = {
#	if = { limit = { building_total_jobs > 0 occupancy > 0 }
#		value = building_avg_wage
#		multiply = building_total_jobs
#		divide = building_total_jobs_weighted
#	} else = { value = 0 }
#}

#estimate - doesn't include discrimination factor and uneven occupancy because this will take a lot of CPU iterating through pops
#building_max_wage = {
#	if = { limit = { building_total_jobs > 0 occupancy > 0 }
#		value = earnings
#		multiply = building_total_jobs
#		divide = building_total_jobs_weighted
#	} else = { value = 0 }
#}

country_colonial_growth_per_colony = {
	value = colonial_growth_per_colony
}

country_colonial_growth_per_colony_extra = {
	value = colonial_growth_per_colony
	subtract = define:NPops|MAX_COLONIAL_GROWTH
	multiply = num_colony_projects
}

country_colonial_growth_per_colony_extra_ratio = {
	value = country_colonial_growth_per_colony_extra
	divide = define:NPops|MAX_COLONIAL_GROWTH
}

state_region_player_colonizable_count = {
	every_state_region = {
		if = { limit = { exists = var:player_colonizable }
			if = { limit = { var:player_colonizable = yes }
				add = 1
		} }
	}
}

market_goods_price = {
	if = { limit = { market_goods_delta < 0 }
		#Shortage, balance is negative. Price modifier = (Balance / Sell Orders) * -75%
		if = { limit = { market_goods_sell_orders = 0 }
			value = 0.75
		}
		else = { 
			value = market_goods_delta
			divide = market_goods_sell_orders
			multiply = -0.75
		}
	} else_if = { limit = { market_goods_delta > 0 }
		#Surplus, balance is positive. Price modifier = (Balance / Buy Orders) * -75%
		if = { limit = { market_goods_buy_orders = 0 }
			if = { limit = { goods = g:gold } value = 0 }
			else = { value = -0.75 }
		}
		else = { 
			value = market_goods_delta
			divide = market_goods_buy_orders
			multiply = -0.75
		}
	} else = { value = 0 }
	max = 0.75
	min = -0.75
}

gui_states_build_list_page_size = 25

state_btype_level = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = level
	}
}

state_btype_earnings = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = earnings
	}
}

state_btype_avg_wage = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = building_avg_wage
	}
}

state_btype_productivity_prog = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = building_productivity_prog
	}
}

building_level_prog = {
	value = level
	add = building_levelq
}

state_btype_level_prog = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = building_level_prog
	}
}

state_gui_map_list_index = {
	if = { limit = { exists = var:gui_map_list_vo_index } value = var:gui_map_list_vo_index }
	else_if = { limit = { exists = var:gui_map_list_io_index } value = var:gui_map_list_io_index }
	else_if = { limit = { exists = var:gui_map_list_fo_index } value = var:gui_map_list_fo_index }
}

state_num_construction = {
	every_scope_building = {
		limit = { is_under_construction = yes }
		add = 1
	}
}

state_port_level = {
	if = { limit = { exists = b:building_port }
		b:building_port ?= {
			value = level
		}
	}
}

state_railway_level = {
	if = { limit = { exists = b:building_railway }
		b:building_railway ?= {
			value = level
		}
	}
}

state_port_level_prog = {
	value = state_port_level
	if = { limit = { exists = b:building_port }
		b:building_port ?= {
			add = building_levelq
		}
	}	
}

state_railway_level_prog = {
	value = state_railway_level
	if = { limit = { exists = b:building_railway }
		b:building_railway ?= {
			add = building_levelq
		}
	}	
}

state_order_btype_level = {
	if = { limit = { exists = global_var:gui_states_build_list_order_btype }
		every_scope_building = {
			limit = { type = global_var:gui_states_build_list_order_btype }
			value = level
		}
	}
}

state_order_btype_level_prog = {
	if = { limit = { exists = global_var:gui_states_build_list_order_btype }
		every_scope_building = {
			limit = { type = global_var:gui_states_build_list_order_btype }
			value = level
			add = building_levelq
		}
	}
}

state_discrimination_culture = {
	every_scope_culture = {
		limit = { culture_is_discriminated_in = PREV.owner }
		if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.95 } } } add = 0.95 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.9 } } } add = 0.9 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.85 } } } add = 0.85 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.8 } } } add = 0.8 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.75 } } } add = 0.75 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.7 } } } add = 0.7 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.65 } } } add = 0.65 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.6 } } } add = 0.6 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.55 } } } add = 0.55 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.5 } } } add = 0.5 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.45 } } } add = 0.45 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.4 } } } add = 0.4 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.35 } } } add = 0.35 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.3 } } } add = 0.3 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.25 } } } add = 0.25 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.2 } } } add = 0.2 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.15 } } } add = 0.15 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.1 } } } add = 0.1 }
		else_if = { limit = { PREV = { culture_percent_state = { target = PREV value >= 0.05 } } } add = 0.05 }
	}
}

state_discrimination_religion = {
	save_temporary_scope_as = state
	owner = { every_in_list = {
		variable = discriminated_religions
		if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.95 } } } add = 0.95 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.9 } } } add = 0.9 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.85 } } } add = 0.85 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.8 } } } add = 0.8 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.75 } } } add = 0.75 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.7 } } } add = 0.7 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.65 } } } add = 0.65 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.6 } } } add = 0.6 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.55 } } } add = 0.55 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.5 } } } add = 0.5 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.45 } } } add = 0.45 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.4 } } } add = 0.4 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.35 } } } add = 0.35 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.3 } } } add = 0.3 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.25 } } } add = 0.25 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.2 } } } add = 0.2 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.15 } } } add = 0.15 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.1 } } } add = 0.1 }
		else_if = { limit = { scope:state = { religion_percent_state = { target = PREV value >= 0.05 } } } add = 0.05 }
	} }
}

state_discrimination = {
	value = state_discrimination_culture
	min = state_discrimination_religion
}

state_btype_labor_need = {
	if = { limit = { any_scope_building = { type = global_var:gui_states_build_list_btype } }
		every_scope_building = {
			limit = { type = global_var:gui_states_build_list_btype }
			value = building_employment
			multiply = { value = 1 add = building_group_employee_mult }
		}
	} else = {
			value = 5000
	}
	multiply = global_var:gui_states_build_list_filter_labor_vn
}

state_btype_max_wage = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = building_max_wage
	}
}

state_btype_max_wage_prog = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = building_max_wage_prog
	}
}

state_btype_base_wage = {
	every_scope_building = {
		limit = { type = global_var:gui_states_build_list_btype }
		value = building_base_wage
	}
}

test_poll_rate = {
	value = { value = 3 desc = "abc" }
}